"""Token constants."""
# Auto-generated by Tools/build/generate_token.py

__all__ = ['tok_name', 'ISTERMINAL', 'ISNONTERMINAL', 'ISEOF']

ENDMARKER = 0
NAME = 1
NAME_RAW = 2
NUMBER = 3
STRING = 4
NEWLINE = 5
INDENT = 6
DEDENT = 7
LPAR = 8
RPAR = 9
LSQB = 10
RSQB = 11
COLON = 12
COMMA = 13
SEMI = 14
PLUS = 15
MINUS = 16
STAR = 17
SLASH = 18
VBAR = 19
AMPER = 20
LESS = 21
GREATER = 22
EQUAL = 23
DOT = 24
PERCENT = 25
LBRACE = 26
RBRACE = 27
EQEQUAL = 28
NOTEQUAL = 29
JSXFRAGMENTOPEN = 30
LESSEQUAL = 31
GREATEREQUAL = 32
TILDE = 33
CIRCUMFLEX = 34
LEFTSHIFT = 35
RIGHTSHIFT = 36
DOUBLESTAR = 37
PLUSEQUAL = 38
MINEQUAL = 39
STAREQUAL = 40
SLASHEQUAL = 41
PERCENTEQUAL = 42
AMPEREQUAL = 43
VBAREQUAL = 44
CIRCUMFLEXEQUAL = 45
LEFTSHIFTEQUAL = 46
RIGHTSHIFTEQUAL = 47
DOUBLESTAREQUAL = 48
DOUBLESLASH = 49
DOUBLESLASHEQUAL = 50
AT = 51
ATEQUAL = 52
RARROW = 53
ELLIPSIS = 54
COLONEQUAL = 55
EXCLAMATION = 56
OP = 57
TYPE_IGNORE = 58
TYPE_COMMENT = 59
SOFT_KEYWORD = 60
FSTRING_START = 61
FSTRING_MIDDLE = 62
FSTRING_END = 63
COMMENT = 64
NL = 65
# These aren't used by the C tokenizer but are needed for tokenize.py
ERRORTOKEN = 66
ENCODING = 67
N_TOKENS = 68
# Special definitions for cooperation with parser
NT_OFFSET = 256

tok_name = {value: name
            for name, value in globals().items()
            if isinstance(value, int) and not name.startswith('_')}
__all__.extend(tok_name.values())

EXACT_TOKEN_TYPES = {
    '!': EXCLAMATION,
    '!=': NOTEQUAL,
    '%': PERCENT,
    '%=': PERCENTEQUAL,
    '&': AMPER,
    '&=': AMPEREQUAL,
    '(': LPAR,
    ')': RPAR,
    '*': STAR,
    '**': DOUBLESTAR,
    '**=': DOUBLESTAREQUAL,
    '*=': STAREQUAL,
    '+': PLUS,
    '+=': PLUSEQUAL,
    ',': COMMA,
    '-': MINUS,
    '-=': MINEQUAL,
    '->': RARROW,
    '.': DOT,
    '...': ELLIPSIS,
    '/': SLASH,
    '//': DOUBLESLASH,
    '//=': DOUBLESLASHEQUAL,
    '/=': SLASHEQUAL,
    ':': COLON,
    ':=': COLONEQUAL,
    ';': SEMI,
    '<': LESS,
    '<<': LEFTSHIFT,
    '<<=': LEFTSHIFTEQUAL,
    '<=': LESSEQUAL,
    '<>': JSXFRAGMENTOPEN,
    '=': EQUAL,
    '==': EQEQUAL,
    '>': GREATER,
    '>=': GREATEREQUAL,
    '>>': RIGHTSHIFT,
    '>>=': RIGHTSHIFTEQUAL,
    '@': AT,
    '@=': ATEQUAL,
    '[': LSQB,
    ']': RSQB,
    '^': CIRCUMFLEX,
    '^=': CIRCUMFLEXEQUAL,
    '{': LBRACE,
    '|': VBAR,
    '|=': VBAREQUAL,
    '}': RBRACE,
    '~': TILDE,
}

def ISTERMINAL(x):
    return x < NT_OFFSET

def ISNONTERMINAL(x):
    return x >= NT_OFFSET

def ISEOF(x):
    return x == ENDMARKER
